// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: find_one_contact_response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_find_5fone_5fcontact_5fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_find_5fone_5fcontact_5fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_find_5fone_5fcontact_5fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_find_5fone_5fcontact_5fresponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_find_5fone_5fcontact_5fresponse_2eproto;
namespace find_one_contact_response {
class FindOneContactResponse;
struct FindOneContactResponseDefaultTypeInternal;
extern FindOneContactResponseDefaultTypeInternal _FindOneContactResponse_default_instance_;
class PeopleInfo;
struct PeopleInfoDefaultTypeInternal;
extern PeopleInfoDefaultTypeInternal _PeopleInfo_default_instance_;
class PeopleInfo_Phone;
struct PeopleInfo_PhoneDefaultTypeInternal;
extern PeopleInfo_PhoneDefaultTypeInternal _PeopleInfo_Phone_default_instance_;
class PeopleInfo_RemarkEntry_DoNotUse;
struct PeopleInfo_RemarkEntry_DoNotUseDefaultTypeInternal;
extern PeopleInfo_RemarkEntry_DoNotUseDefaultTypeInternal _PeopleInfo_RemarkEntry_DoNotUse_default_instance_;
}  // namespace find_one_contact_response
PROTOBUF_NAMESPACE_OPEN
template<> ::find_one_contact_response::FindOneContactResponse* Arena::CreateMaybeMessage<::find_one_contact_response::FindOneContactResponse>(Arena*);
template<> ::find_one_contact_response::PeopleInfo* Arena::CreateMaybeMessage<::find_one_contact_response::PeopleInfo>(Arena*);
template<> ::find_one_contact_response::PeopleInfo_Phone* Arena::CreateMaybeMessage<::find_one_contact_response::PeopleInfo_Phone>(Arena*);
template<> ::find_one_contact_response::PeopleInfo_RemarkEntry_DoNotUse* Arena::CreateMaybeMessage<::find_one_contact_response::PeopleInfo_RemarkEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace find_one_contact_response {

enum PeopleInfo_Phone_PhoneType : int {
  PeopleInfo_Phone_PhoneType_MOBILE_PHONE = 0,
  PeopleInfo_Phone_PhoneType_TELEPHONE = 1,
  PeopleInfo_Phone_PhoneType_PeopleInfo_Phone_PhoneType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PeopleInfo_Phone_PhoneType_PeopleInfo_Phone_PhoneType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PeopleInfo_Phone_PhoneType_IsValid(int value);
constexpr PeopleInfo_Phone_PhoneType PeopleInfo_Phone_PhoneType_PhoneType_MIN = PeopleInfo_Phone_PhoneType_MOBILE_PHONE;
constexpr PeopleInfo_Phone_PhoneType PeopleInfo_Phone_PhoneType_PhoneType_MAX = PeopleInfo_Phone_PhoneType_TELEPHONE;
constexpr int PeopleInfo_Phone_PhoneType_PhoneType_ARRAYSIZE = PeopleInfo_Phone_PhoneType_PhoneType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeopleInfo_Phone_PhoneType_descriptor();
template<typename T>
inline const std::string& PeopleInfo_Phone_PhoneType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeopleInfo_Phone_PhoneType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeopleInfo_Phone_PhoneType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeopleInfo_Phone_PhoneType_descriptor(), enum_t_value);
}
inline bool PeopleInfo_Phone_PhoneType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PeopleInfo_Phone_PhoneType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeopleInfo_Phone_PhoneType>(
    PeopleInfo_Phone_PhoneType_descriptor(), name, value);
}
// ===================================================================

class PeopleInfo_Phone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:find_one_contact_response.PeopleInfo.Phone) */ {
 public:
  inline PeopleInfo_Phone() : PeopleInfo_Phone(nullptr) {}
  ~PeopleInfo_Phone() override;
  explicit PROTOBUF_CONSTEXPR PeopleInfo_Phone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeopleInfo_Phone(const PeopleInfo_Phone& from);
  PeopleInfo_Phone(PeopleInfo_Phone&& from) noexcept
    : PeopleInfo_Phone() {
    *this = ::std::move(from);
  }

  inline PeopleInfo_Phone& operator=(const PeopleInfo_Phone& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeopleInfo_Phone& operator=(PeopleInfo_Phone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeopleInfo_Phone& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeopleInfo_Phone* internal_default_instance() {
    return reinterpret_cast<const PeopleInfo_Phone*>(
               &_PeopleInfo_Phone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PeopleInfo_Phone& a, PeopleInfo_Phone& b) {
    a.Swap(&b);
  }
  inline void Swap(PeopleInfo_Phone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeopleInfo_Phone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeopleInfo_Phone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeopleInfo_Phone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PeopleInfo_Phone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PeopleInfo_Phone& from) {
    PeopleInfo_Phone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeopleInfo_Phone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "find_one_contact_response.PeopleInfo.Phone";
  }
  protected:
  explicit PeopleInfo_Phone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PeopleInfo_Phone_PhoneType PhoneType;
  static constexpr PhoneType MOBILE_PHONE =
    PeopleInfo_Phone_PhoneType_MOBILE_PHONE;
  static constexpr PhoneType TELEPHONE =
    PeopleInfo_Phone_PhoneType_TELEPHONE;
  static inline bool PhoneType_IsValid(int value) {
    return PeopleInfo_Phone_PhoneType_IsValid(value);
  }
  static constexpr PhoneType PhoneType_MIN =
    PeopleInfo_Phone_PhoneType_PhoneType_MIN;
  static constexpr PhoneType PhoneType_MAX =
    PeopleInfo_Phone_PhoneType_PhoneType_MAX;
  static constexpr int PhoneType_ARRAYSIZE =
    PeopleInfo_Phone_PhoneType_PhoneType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PhoneType_descriptor() {
    return PeopleInfo_Phone_PhoneType_descriptor();
  }
  template<typename T>
  static inline const std::string& PhoneType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PhoneType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PhoneType_Name.");
    return PeopleInfo_Phone_PhoneType_Name(enum_t_value);
  }
  static inline bool PhoneType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PhoneType* value) {
    return PeopleInfo_Phone_PhoneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string number = 1;
  void clear_number();
  const std::string& number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_number();
  PROTOBUF_NODISCARD std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // .find_one_contact_response.PeopleInfo.Phone.PhoneType type = 2;
  void clear_type();
  ::find_one_contact_response::PeopleInfo_Phone_PhoneType type() const;
  void set_type(::find_one_contact_response::PeopleInfo_Phone_PhoneType value);
  private:
  ::find_one_contact_response::PeopleInfo_Phone_PhoneType _internal_type() const;
  void _internal_set_type(::find_one_contact_response::PeopleInfo_Phone_PhoneType value);
  public:

  // @@protoc_insertion_point(class_scope:find_one_contact_response.PeopleInfo.Phone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_find_5fone_5fcontact_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class PeopleInfo_RemarkEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PeopleInfo_RemarkEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PeopleInfo_RemarkEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  PeopleInfo_RemarkEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PeopleInfo_RemarkEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PeopleInfo_RemarkEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PeopleInfo_RemarkEntry_DoNotUse& other);
  static const PeopleInfo_RemarkEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PeopleInfo_RemarkEntry_DoNotUse*>(&_PeopleInfo_RemarkEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "find_one_contact_response.PeopleInfo.RemarkEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "find_one_contact_response.PeopleInfo.RemarkEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_find_5fone_5fcontact_5fresponse_2eproto;
};

// -------------------------------------------------------------------

class PeopleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:find_one_contact_response.PeopleInfo) */ {
 public:
  inline PeopleInfo() : PeopleInfo(nullptr) {}
  ~PeopleInfo() override;
  explicit PROTOBUF_CONSTEXPR PeopleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeopleInfo(const PeopleInfo& from);
  PeopleInfo(PeopleInfo&& from) noexcept
    : PeopleInfo() {
    *this = ::std::move(from);
  }

  inline PeopleInfo& operator=(const PeopleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeopleInfo& operator=(PeopleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeopleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeopleInfo* internal_default_instance() {
    return reinterpret_cast<const PeopleInfo*>(
               &_PeopleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PeopleInfo& a, PeopleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PeopleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeopleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeopleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeopleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PeopleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PeopleInfo& from) {
    PeopleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeopleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "find_one_contact_response.PeopleInfo";
  }
  protected:
  explicit PeopleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PeopleInfo_Phone Phone;

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 4,
    kRemarkFieldNumber = 5,
    kUidFieldNumber = 1,
    kNameFieldNumber = 2,
    kAgeFieldNumber = 3,
  };
  // repeated .find_one_contact_response.PeopleInfo.Phone phone = 4;
  int phone_size() const;
  private:
  int _internal_phone_size() const;
  public:
  void clear_phone();
  ::find_one_contact_response::PeopleInfo_Phone* mutable_phone(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::find_one_contact_response::PeopleInfo_Phone >*
      mutable_phone();
  private:
  const ::find_one_contact_response::PeopleInfo_Phone& _internal_phone(int index) const;
  ::find_one_contact_response::PeopleInfo_Phone* _internal_add_phone();
  public:
  const ::find_one_contact_response::PeopleInfo_Phone& phone(int index) const;
  ::find_one_contact_response::PeopleInfo_Phone* add_phone();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::find_one_contact_response::PeopleInfo_Phone >&
      phone() const;

  // map<string, string> remark = 5;
  int remark_size() const;
  private:
  int _internal_remark_size() const;
  public:
  void clear_remark();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_remark() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_remark();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      remark() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_remark();

  // string uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 3;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:find_one_contact_response.PeopleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::find_one_contact_response::PeopleInfo_Phone > phone_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PeopleInfo_RemarkEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> remark_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t age_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_find_5fone_5fcontact_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class FindOneContactResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:find_one_contact_response.FindOneContactResponse) */ {
 public:
  inline FindOneContactResponse() : FindOneContactResponse(nullptr) {}
  ~FindOneContactResponse() override;
  explicit PROTOBUF_CONSTEXPR FindOneContactResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindOneContactResponse(const FindOneContactResponse& from);
  FindOneContactResponse(FindOneContactResponse&& from) noexcept
    : FindOneContactResponse() {
    *this = ::std::move(from);
  }

  inline FindOneContactResponse& operator=(const FindOneContactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindOneContactResponse& operator=(FindOneContactResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindOneContactResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindOneContactResponse* internal_default_instance() {
    return reinterpret_cast<const FindOneContactResponse*>(
               &_FindOneContactResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FindOneContactResponse& a, FindOneContactResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindOneContactResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindOneContactResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindOneContactResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindOneContactResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindOneContactResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindOneContactResponse& from) {
    FindOneContactResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindOneContactResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "find_one_contact_response.FindOneContactResponse";
  }
  protected:
  explicit FindOneContactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDescFieldNumber = 2,
    kPeopleInfoFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string error_desc = 2;
  void clear_error_desc();
  const std::string& error_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_desc();
  PROTOBUF_NODISCARD std::string* release_error_desc();
  void set_allocated_error_desc(std::string* error_desc);
  private:
  const std::string& _internal_error_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_desc(const std::string& value);
  std::string* _internal_mutable_error_desc();
  public:

  // .find_one_contact_response.PeopleInfo people_info = 3;
  bool has_people_info() const;
  private:
  bool _internal_has_people_info() const;
  public:
  void clear_people_info();
  const ::find_one_contact_response::PeopleInfo& people_info() const;
  PROTOBUF_NODISCARD ::find_one_contact_response::PeopleInfo* release_people_info();
  ::find_one_contact_response::PeopleInfo* mutable_people_info();
  void set_allocated_people_info(::find_one_contact_response::PeopleInfo* people_info);
  private:
  const ::find_one_contact_response::PeopleInfo& _internal_people_info() const;
  ::find_one_contact_response::PeopleInfo* _internal_mutable_people_info();
  public:
  void unsafe_arena_set_allocated_people_info(
      ::find_one_contact_response::PeopleInfo* people_info);
  ::find_one_contact_response::PeopleInfo* unsafe_arena_release_people_info();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:find_one_contact_response.FindOneContactResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_desc_;
    ::find_one_contact_response::PeopleInfo* people_info_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_find_5fone_5fcontact_5fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeopleInfo_Phone

// string number = 1;
inline void PeopleInfo_Phone::clear_number() {
  _impl_.number_.ClearToEmpty();
}
inline const std::string& PeopleInfo_Phone::number() const {
  // @@protoc_insertion_point(field_get:find_one_contact_response.PeopleInfo.Phone.number)
  return _internal_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeopleInfo_Phone::set_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:find_one_contact_response.PeopleInfo.Phone.number)
}
inline std::string* PeopleInfo_Phone::mutable_number() {
  std::string* _s = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:find_one_contact_response.PeopleInfo.Phone.number)
  return _s;
}
inline const std::string& PeopleInfo_Phone::_internal_number() const {
  return _impl_.number_.Get();
}
inline void PeopleInfo_Phone::_internal_set_number(const std::string& value) {
  
  _impl_.number_.Set(value, GetArenaForAllocation());
}
inline std::string* PeopleInfo_Phone::_internal_mutable_number() {
  
  return _impl_.number_.Mutable(GetArenaForAllocation());
}
inline std::string* PeopleInfo_Phone::release_number() {
  // @@protoc_insertion_point(field_release:find_one_contact_response.PeopleInfo.Phone.number)
  return _impl_.number_.Release();
}
inline void PeopleInfo_Phone::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  _impl_.number_.SetAllocated(number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.number_.IsDefault()) {
    _impl_.number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:find_one_contact_response.PeopleInfo.Phone.number)
}

// .find_one_contact_response.PeopleInfo.Phone.PhoneType type = 2;
inline void PeopleInfo_Phone::clear_type() {
  _impl_.type_ = 0;
}
inline ::find_one_contact_response::PeopleInfo_Phone_PhoneType PeopleInfo_Phone::_internal_type() const {
  return static_cast< ::find_one_contact_response::PeopleInfo_Phone_PhoneType >(_impl_.type_);
}
inline ::find_one_contact_response::PeopleInfo_Phone_PhoneType PeopleInfo_Phone::type() const {
  // @@protoc_insertion_point(field_get:find_one_contact_response.PeopleInfo.Phone.type)
  return _internal_type();
}
inline void PeopleInfo_Phone::_internal_set_type(::find_one_contact_response::PeopleInfo_Phone_PhoneType value) {
  
  _impl_.type_ = value;
}
inline void PeopleInfo_Phone::set_type(::find_one_contact_response::PeopleInfo_Phone_PhoneType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:find_one_contact_response.PeopleInfo.Phone.type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PeopleInfo

// string uid = 1;
inline void PeopleInfo::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& PeopleInfo::uid() const {
  // @@protoc_insertion_point(field_get:find_one_contact_response.PeopleInfo.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeopleInfo::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:find_one_contact_response.PeopleInfo.uid)
}
inline std::string* PeopleInfo::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:find_one_contact_response.PeopleInfo.uid)
  return _s;
}
inline const std::string& PeopleInfo::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void PeopleInfo::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* PeopleInfo::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* PeopleInfo::release_uid() {
  // @@protoc_insertion_point(field_release:find_one_contact_response.PeopleInfo.uid)
  return _impl_.uid_.Release();
}
inline void PeopleInfo::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:find_one_contact_response.PeopleInfo.uid)
}

// string name = 2;
inline void PeopleInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PeopleInfo::name() const {
  // @@protoc_insertion_point(field_get:find_one_contact_response.PeopleInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeopleInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:find_one_contact_response.PeopleInfo.name)
}
inline std::string* PeopleInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:find_one_contact_response.PeopleInfo.name)
  return _s;
}
inline const std::string& PeopleInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PeopleInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PeopleInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PeopleInfo::release_name() {
  // @@protoc_insertion_point(field_release:find_one_contact_response.PeopleInfo.name)
  return _impl_.name_.Release();
}
inline void PeopleInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:find_one_contact_response.PeopleInfo.name)
}

// int32 age = 3;
inline void PeopleInfo::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t PeopleInfo::_internal_age() const {
  return _impl_.age_;
}
inline int32_t PeopleInfo::age() const {
  // @@protoc_insertion_point(field_get:find_one_contact_response.PeopleInfo.age)
  return _internal_age();
}
inline void PeopleInfo::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void PeopleInfo::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:find_one_contact_response.PeopleInfo.age)
}

// repeated .find_one_contact_response.PeopleInfo.Phone phone = 4;
inline int PeopleInfo::_internal_phone_size() const {
  return _impl_.phone_.size();
}
inline int PeopleInfo::phone_size() const {
  return _internal_phone_size();
}
inline void PeopleInfo::clear_phone() {
  _impl_.phone_.Clear();
}
inline ::find_one_contact_response::PeopleInfo_Phone* PeopleInfo::mutable_phone(int index) {
  // @@protoc_insertion_point(field_mutable:find_one_contact_response.PeopleInfo.phone)
  return _impl_.phone_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::find_one_contact_response::PeopleInfo_Phone >*
PeopleInfo::mutable_phone() {
  // @@protoc_insertion_point(field_mutable_list:find_one_contact_response.PeopleInfo.phone)
  return &_impl_.phone_;
}
inline const ::find_one_contact_response::PeopleInfo_Phone& PeopleInfo::_internal_phone(int index) const {
  return _impl_.phone_.Get(index);
}
inline const ::find_one_contact_response::PeopleInfo_Phone& PeopleInfo::phone(int index) const {
  // @@protoc_insertion_point(field_get:find_one_contact_response.PeopleInfo.phone)
  return _internal_phone(index);
}
inline ::find_one_contact_response::PeopleInfo_Phone* PeopleInfo::_internal_add_phone() {
  return _impl_.phone_.Add();
}
inline ::find_one_contact_response::PeopleInfo_Phone* PeopleInfo::add_phone() {
  ::find_one_contact_response::PeopleInfo_Phone* _add = _internal_add_phone();
  // @@protoc_insertion_point(field_add:find_one_contact_response.PeopleInfo.phone)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::find_one_contact_response::PeopleInfo_Phone >&
PeopleInfo::phone() const {
  // @@protoc_insertion_point(field_list:find_one_contact_response.PeopleInfo.phone)
  return _impl_.phone_;
}

// map<string, string> remark = 5;
inline int PeopleInfo::_internal_remark_size() const {
  return _impl_.remark_.size();
}
inline int PeopleInfo::remark_size() const {
  return _internal_remark_size();
}
inline void PeopleInfo::clear_remark() {
  _impl_.remark_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PeopleInfo::_internal_remark() const {
  return _impl_.remark_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PeopleInfo::remark() const {
  // @@protoc_insertion_point(field_map:find_one_contact_response.PeopleInfo.remark)
  return _internal_remark();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PeopleInfo::_internal_mutable_remark() {
  return _impl_.remark_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PeopleInfo::mutable_remark() {
  // @@protoc_insertion_point(field_mutable_map:find_one_contact_response.PeopleInfo.remark)
  return _internal_mutable_remark();
}

// -------------------------------------------------------------------

// FindOneContactResponse

// bool success = 1;
inline void FindOneContactResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool FindOneContactResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool FindOneContactResponse::success() const {
  // @@protoc_insertion_point(field_get:find_one_contact_response.FindOneContactResponse.success)
  return _internal_success();
}
inline void FindOneContactResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void FindOneContactResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:find_one_contact_response.FindOneContactResponse.success)
}

// string error_desc = 2;
inline void FindOneContactResponse::clear_error_desc() {
  _impl_.error_desc_.ClearToEmpty();
}
inline const std::string& FindOneContactResponse::error_desc() const {
  // @@protoc_insertion_point(field_get:find_one_contact_response.FindOneContactResponse.error_desc)
  return _internal_error_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindOneContactResponse::set_error_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:find_one_contact_response.FindOneContactResponse.error_desc)
}
inline std::string* FindOneContactResponse::mutable_error_desc() {
  std::string* _s = _internal_mutable_error_desc();
  // @@protoc_insertion_point(field_mutable:find_one_contact_response.FindOneContactResponse.error_desc)
  return _s;
}
inline const std::string& FindOneContactResponse::_internal_error_desc() const {
  return _impl_.error_desc_.Get();
}
inline void FindOneContactResponse::_internal_set_error_desc(const std::string& value) {
  
  _impl_.error_desc_.Set(value, GetArenaForAllocation());
}
inline std::string* FindOneContactResponse::_internal_mutable_error_desc() {
  
  return _impl_.error_desc_.Mutable(GetArenaForAllocation());
}
inline std::string* FindOneContactResponse::release_error_desc() {
  // @@protoc_insertion_point(field_release:find_one_contact_response.FindOneContactResponse.error_desc)
  return _impl_.error_desc_.Release();
}
inline void FindOneContactResponse::set_allocated_error_desc(std::string* error_desc) {
  if (error_desc != nullptr) {
    
  } else {
    
  }
  _impl_.error_desc_.SetAllocated(error_desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_desc_.IsDefault()) {
    _impl_.error_desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:find_one_contact_response.FindOneContactResponse.error_desc)
}

// .find_one_contact_response.PeopleInfo people_info = 3;
inline bool FindOneContactResponse::_internal_has_people_info() const {
  return this != internal_default_instance() && _impl_.people_info_ != nullptr;
}
inline bool FindOneContactResponse::has_people_info() const {
  return _internal_has_people_info();
}
inline void FindOneContactResponse::clear_people_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.people_info_ != nullptr) {
    delete _impl_.people_info_;
  }
  _impl_.people_info_ = nullptr;
}
inline const ::find_one_contact_response::PeopleInfo& FindOneContactResponse::_internal_people_info() const {
  const ::find_one_contact_response::PeopleInfo* p = _impl_.people_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::find_one_contact_response::PeopleInfo&>(
      ::find_one_contact_response::_PeopleInfo_default_instance_);
}
inline const ::find_one_contact_response::PeopleInfo& FindOneContactResponse::people_info() const {
  // @@protoc_insertion_point(field_get:find_one_contact_response.FindOneContactResponse.people_info)
  return _internal_people_info();
}
inline void FindOneContactResponse::unsafe_arena_set_allocated_people_info(
    ::find_one_contact_response::PeopleInfo* people_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.people_info_);
  }
  _impl_.people_info_ = people_info;
  if (people_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:find_one_contact_response.FindOneContactResponse.people_info)
}
inline ::find_one_contact_response::PeopleInfo* FindOneContactResponse::release_people_info() {
  
  ::find_one_contact_response::PeopleInfo* temp = _impl_.people_info_;
  _impl_.people_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::find_one_contact_response::PeopleInfo* FindOneContactResponse::unsafe_arena_release_people_info() {
  // @@protoc_insertion_point(field_release:find_one_contact_response.FindOneContactResponse.people_info)
  
  ::find_one_contact_response::PeopleInfo* temp = _impl_.people_info_;
  _impl_.people_info_ = nullptr;
  return temp;
}
inline ::find_one_contact_response::PeopleInfo* FindOneContactResponse::_internal_mutable_people_info() {
  
  if (_impl_.people_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::find_one_contact_response::PeopleInfo>(GetArenaForAllocation());
    _impl_.people_info_ = p;
  }
  return _impl_.people_info_;
}
inline ::find_one_contact_response::PeopleInfo* FindOneContactResponse::mutable_people_info() {
  ::find_one_contact_response::PeopleInfo* _msg = _internal_mutable_people_info();
  // @@protoc_insertion_point(field_mutable:find_one_contact_response.FindOneContactResponse.people_info)
  return _msg;
}
inline void FindOneContactResponse::set_allocated_people_info(::find_one_contact_response::PeopleInfo* people_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.people_info_;
  }
  if (people_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(people_info);
    if (message_arena != submessage_arena) {
      people_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, people_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.people_info_ = people_info;
  // @@protoc_insertion_point(field_set_allocated:find_one_contact_response.FindOneContactResponse.people_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace find_one_contact_response

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::find_one_contact_response::PeopleInfo_Phone_PhoneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::find_one_contact_response::PeopleInfo_Phone_PhoneType>() {
  return ::find_one_contact_response::PeopleInfo_Phone_PhoneType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_find_5fone_5fcontact_5fresponse_2eproto
